name: Publish Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  publish_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get release notes from draft
        id: draft_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = context.ref.replace('refs/tags/', '');
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const draft = releases.find(r => r.draft);
            if (!draft) {
              core.setFailed('❌ Aucun draft trouvé.');
              return;
            }

            core.setOutput('release_body', draft.body);
            core.setOutput('draft_id', draft.id);

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "🚀 ${{ github.ref_name }}"
          body: ${{ steps.draft_release.outputs.release_body }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete draft release
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const releaseId = ${{ steps.draft_release.outputs.draft_id }};
            await github.rest.repos.deleteRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
            });

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build with Gradle
        run: ./gradlew build

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          VERSION="${{ github.ref_name }}"
          IMAGE="ghcr.io/${{ github.repository }}"

          echo "🔧 Building Docker image: $IMAGE:$VERSION"
          docker build -t "$IMAGE:$VERSION" .
          docker tag "$IMAGE:$VERSION" "$IMAGE:latest"
          docker push "$IMAGE:$VERSION"
          docker push "$IMAGE:latest"

      - name: Cleanup dev-* tags from GHCR
        if: success()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IMAGE: ${{ github.repository }}
        run: |
          echo "::add-mask::$GH_TOKEN"
          echo "🔍 Looking for dev-* tags in ghcr.io/$IMAGE"

          sudo apt-get update -qq && sudo apt-get install -y -qq gh jq

          gh auth status || true

          gh api -H "Accept: application/vnd.github+json" \
            "/orgs/${IMAGE%%/*}/packages/container/${IMAGE#*/}/versions" > versions.json

          TAGS=$(jq -r '.[] | select(.metadata.container.tags[] | startswith("dev-")) | [.id, .metadata.container.tags[]] | @tsv' versions.json)

          if [ -z "$TAGS" ]; then
            echo "✅ Aucun tag dev-* trouvé."
            exit 0
          fi

          echo "$TAGS" | while IFS=$'\t' read -r id tag; do
            echo "🗑️ Suppression du tag: $tag (version ID: $id)"
            gh api --method DELETE "/orgs/${IMAGE%%/*}/packages/container/${IMAGE#*/}/versions/$id"
          done

          echo "✅ Cleanup terminé."
